# -*- sh -*-

# パスの設定
## 重複したパスを登録しない。
typeset -U path
## (N-/): 存在しないディレクトリは登録しない。
##    パス(...): ...という条件にマッチするパスのみ残す。
##            N: NULL_GLOBオプションを設定。
##               globがマッチしなかったり存在しないパスを無視する。
##            -: シンボリックリンク先のパスを評価。
##            /: ディレクトリのみ残す。
path=(# システム用
      /bin(N-/)
      # 自分用（--prefix=$HOME/localでインストールしたもの）
      $HOME/local/bin(N-/)
      # 自分用（gem install --user-installでインストールしたもの）
      ## 2012-01-07
      $HOME/.gem/ruby/*/bin(N-/)
      # rbenv用
      ## 2012-02-21
      $HOME/.rbenv/bin(N-/)
      # Debian GNU/Linux用
      /var/lib/gems/*/bin(N-/)
      # MacPorts用
      /opt/local/bin(N-/)
      # Solaris用
      /opt/csw/bin(N-/)
      /usr/sfw/bin(N-/)
      /usr/ccs/bin(N-/)
      # Cygwin用
      /cygdrive/c/meadow/bin(N-/)
      # システム用
      /usr/local/bin(N-/)
      /usr/bin(N-/)
      /usr/games(N-/))

# sudo時のパスの設定
## -x: export SUDO_PATHも一緒に行う。
## -T: SUDO_PATHとsudo_pathを連動する。
typeset -xT SUDO_PATH sudo_path
## 重複したパスを登録しない。
typeset -U sudo_path
## (N-/): 存在しないディレクトリは登録しない。
##    パス(...): ...という条件にマッチするパスのみ残す。
##            N: NULL_GLOBオプションを設定。
##               globがマッチしなかったり存在しないパスを無視する。
##            -: シンボリックリンク先のパスを評価。
##            /: ディレクトリのみ残す。
sudo_path=({,/usr/pkg,/usr/local,/usr}/sbin(N-/))

# man用パスの設定
## 重複したパスを登録しない。
typeset -U manpath
## (N-/) 存在しないディレクトリは登録しない。
##    パス(...): ...という条件にマッチするパスのみ残す。
##            N: NULL_GLOBオプションを設定。
##               globがマッチしなかったり存在しないパスを無視する。
##            -: シンボリックリンク先のパスを評価。
##            /: ディレクトリのみ残す。
manpath=(# 自分用
         $HOME/local/share/man(N-/)
         # MacPorts用
         /opt/local/share/man(N-/)
         # Solaris用
         /opt/csw/share/man(N-/)
         /usr/sfw/share/man(N-/)
         # システム用
         /usr/local/share/man(N-/)
         /usr/share/man(N-/))

# Rubyの設定
## ライブラリのロードパス
### -x: export RUBYLIBも一緒に行う。
### -T: RUBYLIBとruby_pathを連動する。
typeset -xT RUBYLIB ruby_path
### 重複したパスを登録しない。
typeset -U ruby_path
### パスを設定
ruby_path=(# カレントディレクトリのライブラリを優先する
           ./lib)

# Pythonの設定
## ライブラリのロードパス
### -x: export PYTHONPATHも一緒に行う。
### -T: PYTHONPATHとpython_pathを連動する。
typeset -xT PYTHONPATH pyhon_path
### 重複したパスを登録しない。
typeset -U python_path
### パスを設定。
python_path=(# カレントディレクトリのライブラリを優先する
             ./lib)

# pkg-configの設定
## .pcのロードパス
### -x: export PKG_CONFIG_PATHも一緒に行う。
### -T: PKG_CONFIG_PATHとpkg_config_pathを連動する。
typeset -xT PKG_CONFIG_PATH pkg_config_path
### 重複したパスを登録しない。
typeset -U pkg_config_path
### パスを設定。
### (N-/) 存在しないディレクトリは登録しない。
###    パス(...): ...という条件にマッチするパスのみ残す。
###            N: NULL_GLOBオプションを設定。
###               globがマッチしなかったり存在しないパスを無視する。
###            -: シンボリックリンク先のパスを評価。
###            /: ディレクトリのみ残す。
pkg_config_path=(# 自分用
                 $HOME/local/lib/pkgconfig(N-/)
                 # MacPorts用
                 /opt/local/lib/pkgconfig(N-/))

# ページャの設定
if type lv > /dev/null 2>&1; then
    ## lvを優先する。
    export PAGER="lv"
else
    ## lvがなかったらlessを使う。
    export PAGER="less"
fi

# lvの設定
if [ "$PAGER" = "lv" ]; then
    ## -c: ANSIエスケープシーケンスの色付けなどを有効にする。
    ## -l: 1行が長くと折り返されていても1行として扱う。
    ##     （コピーしたときに余計な改行を入れない。）
    export LV="-c -l"
else
    ## lvがなくてもlvでページャーを起動する。
    alias lv="$PAGER"
fi

# grepの設定
## GNU grepがあったら優先して使う。
if type ggrep > /dev/null 2>&1; then
    alias grep=ggrep
fi
## grepのバージョンを検出。
grep_version="$(grep --version | head -n 1 | sed -e 's/^[^0-9.]*\([0-9.]*\)$/\1/')"

# sedの設定
## GNU sedがあったら優先して使う。
## 2012-03-04
if type gsed > /dev/null 2>&1; then
    alias sed=gsed
fi

# エディタの設定
## vimを使う。
export EDITOR=vim
## vimがなくてもvimでviを起動する。
if ! type vim > /dev/null 2>&1; then
    alias vim=vi
fi

# メールアドレスの設定
## ~/.zsh.d/email → ~/.emailの順に探して最初に見つかったファイルから読み込む。
## (N-.): 存在しないファイルは登録しない。
##    パス(...): ...という条件にマッチするパスのみ残す。
##            N: NULL_GLOBオプションを設定。
##               globがマッチしなかったり存在しないパスを無視する。
##            -: シンボリックリンク先のパスを評価。
##            .: 通常のファイルのみ残す。
email_files=(~/.zsh.d/email(N-.)
             ~/.email(N-.))
for email_file in ${email_files}; do
    export EMAIL=$(cat "$email_file")
    break
done


#enyenv
export PATH=$HOME/.anyenv/bin:$PATH

# if [ which anyenv ]; then
#     echo "anyenv require."
# else
#     # echo "anyenvをGitHubから取得"
#     git clone https://github.com/anyenv/anyenv ~/.anyenv
#     #shellをリフレッシュ
#     # exec $SHELL -l
#     # source ~/.zshenv
#     echo "デフォルトではinstalltオプションが存在しないため設定する"
#     mkdir -p $(anyenv root)/plugins
#     git clone https://github.com/znz/anyenv-update.git  $(anyenv root)/plugins/anyenv-update
#     #anyenvをアップデート
#     anyenv update
# fi

# #enyenv pyenv and nodenv path
# # export PATH=$(anyenv root)/envs/nodenv/bin:$PATH
# eval "$(anyenv init -)"

# # anyenv python env setup
# export PATH=$(anyenv root)/envs/pyenv/bin:$PATH
# eval "$(pyenv init -)"


# # eval "$(nodenv init -)" 
# pyenv shell --unset


# #python lib path
# #export PYTHONPATH=$PYTHONPATH:/home/takurou/.local/lib/python3.7/site-packages


# #nodenvの設定

# # #serverless
# # export PATH=$HOME/node_modules/.bin/:$PATH


# # # access key and sercret key
# # export AWS_ DEFAULT_ PROFILE=takurou
# # export AWS_ACCESS_KEY_ID=AKIAY3ZK37M4U3SZANOI
# # export AWS_SECRET_ACCESS_KEY=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
# # export AWS_DEFAULT_REGION=ap-northeast-1


# direnv allow
# eval "$(direnv hook zsh)"
# direnv設定
export EDITOR=vim

# export JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64

# AWS_ACCESS_KEY_ID=AKIAY3ZK37M4U3SZANOI
# AWS_SECRET_ACCESS_KEY=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
# AWS_PROFILE=takurou
# AWS_REGION=ap-northeast-1

# # tabtab source for serverless package
# # uninstall by removing these lines or running `tabtab uninstall serverless`
# [ -f /home/takurou/projects/pac-serverless/node_modules/tabtab/.completions/serverless.bash ] && . /home/takurou/projects/pac-serverless/node_modules/tabtab/.completions/serverless.bash
# # tabtab source for sls package
# # uninstall by removing these lines or running `tabtab uninstall sls`
# [ -f /home/takurou/projects/pac-serverless/node_modules/tabtab/.completions/sls.bash ] && . /home/takurou/projects/pac-serverless/node_modules/tabtab/.completions/sls.bash
# # tabtab source for slss package
# # uninstall by removing these lines or running `tabtab uninstall slss`
# [ -f /home/takurou/projects/pac-serverless/node_modules/tabtab/.completions/slss.bash ] && . /home/takurou/projects/pac-serverless/node_modules/tabtab/.completions/slss.bash
# # export JAVA_HOME=`/usr/libexec/java_home -v 15`
# export PATH=/home/takurou/projects/pac-serverless/venv/bin:$PATH

